{
  "name": "Document-Indexer",
  "nodes": [
    {
      "parameters": {},
      "id": "ba9f1893-8b72-4615-b844-d9983395d2af",
      "name": "Manual Trigger",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        416,
        -224
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "command": "for file in /files/*.pdf /files/*.txt /files/*.md; do if [ -f \"$file\" ]; then echo \"FILE:$file\"; head -c 30000 \"$file\" | strings | head -c 5000; echo \"ENDFILE\"; fi; done"
      },
      "id": "30d21a61-c712-41f6-8310-c1b98fce1472",
      "name": "Read Files",
      "type": "n8n-nodes-base.executeCommand",
      "position": [
        624,
        -224
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "jsCode": "// Parse files and create chunks only\nconst output = $input.first().json.stdout || '';\n\nif (!output || !output.includes('FILE:')) {\n  return [{\n    json: {\n      status: 'no_files',\n      message: 'No files found in /files/'\n    }\n  }];\n}\n\nconst CHUNK_SIZE = 500;\nconst CHUNK_OVERLAP = 100;\n\n// Parse files\nconst parts = output.split('FILE:');\nlet totalChunks = 0;\nlet processedFiles = [];\n\n// Process each file and output chunks individually\nconst allItems = [];\n\nfor (const part of parts) {\n  if (!part || !part.includes('ENDFILE')) continue;\n  \n  const lines = part.split('\\n');\n  const filepath = lines[0].trim();\n  const endIndex = part.indexOf('ENDFILE');\n  const content = part.substring(filepath.length + 1, endIndex).trim();\n  \n  if (filepath && content && content.length > 50) {\n    const filename = filepath.split('/').pop();\n    processedFiles.push(filename);\n    \n    // Clean content\n    const cleanContent = content\n      .replace(/[\\r\\n]+/g, ' ')\n      .replace(/\\s+/g, ' ')\n      .trim();\n    \n    // Create chunks\n    let start = 0;\n    let chunkIndex = 0;\n    \n    while (start < cleanContent.length && chunkIndex < 10) {\n      const end = Math.min(start + CHUNK_SIZE, cleanContent.length);\n      const chunkText = cleanContent.slice(start, end);\n      \n      if (chunkText.length >= 50) {\n        allItems.push({\n          json: {\n            chunk_id: `${filename.replace(/[^a-zA-Z0-9]/g, '_')}_${chunkIndex}`,\n            chunk_text: chunkText,\n            source_file: filename,\n            file_path: filepath,\n            chunk_index: chunkIndex\n          }\n        });\n        totalChunks++;\n        chunkIndex++;\n      }\n      \n      start += CHUNK_SIZE - CHUNK_OVERLAP;\n    }\n  }\n}\n\nconsole.log(`Created ${totalChunks} chunks from ${processedFiles.length} files`);\n\nif (allItems.length === 0) {\n  return [{\n    json: {\n      status: 'no_content',\n      message: 'No readable content found in files'\n    }\n  }];\n}\n\n// Return all chunks as individual items\nreturn allItems;"
      },
      "id": "213fc656-81ea-4b2a-a1e0-a84b232ca75b",
      "name": "Create Chunks",
      "type": "n8n-nodes-base.code",
      "position": [
        816,
        -224
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "batchSize": 5,
        "options": {}
      },
      "id": "21ff6e2d-fec9-46c3-bbef-fc910f617662",
      "name": "Batch Chunks",
      "type": "n8n-nodes-base.splitInBatches",
      "position": [
        1024,
        -224
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:11434/api/embeddings",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "model",
              "value": "nomic-embed-text"
            },
            {
              "name": "prompt",
              "value": "={{$json.chunk_text}}"
            }
          ]
        },
        "options": {}
      },
      "id": "0f1dbda8-bfa8-4846-8bea-c9977d0c60ff",
      "name": "Generate Embedding",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1216,
        -544
      ],
      "typeVersion": 3,
      "notes": "Uses HTTP node for Ollama (no header issues with Ollama)"
    },
    {
      "parameters": {
        "jsCode": "// Prepare ChromaDB payload for this batch\nconst items = $input.all();\n\n// Extract data from all items in this batch\nconst ids = [];\nconst documents = [];\nconst metadatas = [];\nconst embeddings = [];\n\nfor (const item of items) {\n  ids.push(item.json.chunk_id);\n  documents.push(item.json.chunk_text);\n  metadatas.push({\n    source_file: item.json.source_file,\n    file_path: item.json.file_path,\n    chunk_index: item.json.chunk_index\n  });\n  \n  // Get embedding from the response\n  if (item.json.embedding) {\n    embeddings.push(item.json.embedding);\n  } else {\n    // Fallback if embedding is missing\n    console.log('Warning: No embedding for chunk', item.json.chunk_id);\n    embeddings.push(new Array(768).fill(0));\n  }\n}\n\nconsole.log(`Prepared batch with ${ids.length} chunks`);\n\n// Return the prepared payload\nreturn [{\n  json: {\n    ids: ids,\n    documents: documents,\n    metadatas: metadatas,\n    embeddings: embeddings\n  }\n}];"
      },
      "id": "06fb9051-1d52-4425-901a-9dec838b301c",
      "name": "Prepare Batch",
      "type": "n8n-nodes-base.code",
      "position": [
        1408,
        -544
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://chromadb:8000/api/v1/collections/local_docs/add",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json) }}",
        "options": {
          "timeout": 30000
        }
      },
      "id": "2de3e4af-0ebf-4858-87dc-75f36099db59",
      "name": "Store in ChromaDB",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        1584,
        -544
      ],
      "typeVersion": 4.1,
      "continueOnFail": true
    },
    {
      "parameters": {
        "jsCode": "// Simple success message\nconst batchResults = $input.all();\nlet successCount = 0;\nlet errorCount = 0;\n\nfor (const result of batchResults) {\n  if (result.json && !result.json.error) {\n    successCount++;\n  } else {\n    errorCount++;\n  }\n}\n\nreturn [{\n  json: {\n    status: 'complete',\n    batches_processed: batchResults.length,\n    successful_batches: successCount,\n    failed_batches: errorCount,\n    message: `Indexing complete: ${successCount} batches stored successfully`\n  }\n}];"
      },
      "id": "f9124f10-3bf9-42db-b2af-86fe57dca034",
      "name": "Final Status",
      "type": "n8n-nodes-base.code",
      "position": [
        1328,
        -208
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "ed57947e-7f9a-41d0-80a2-ab766285cd26",
              "leftValue": "={{ $json.batches_processed }}",
              "rightValue": "={{ $json.successful_batches }}",
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        1536,
        -208
      ],
      "id": "2031f4f5-19e5-444c-9f6e-d8b9f0ca2a20",
      "name": "Success"
    }
  ],
  "pinData": {},
  "connections": {
    "Manual Trigger": {
      "main": [
        [
          {
            "node": "Read Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Read Files": {
      "main": [
        [
          {
            "node": "Create Chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Chunks": {
      "main": [
        [
          {
            "node": "Batch Chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Batch Chunks": {
      "main": [
        [
          {
            "node": "Generate Embedding",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Final Status",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Embedding": {
      "main": [
        [
          {
            "node": "Prepare Batch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Batch": {
      "main": [
        [
          {
            "node": "Store in ChromaDB",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Store in ChromaDB": {
      "main": [
        [
          {
            "node": "Batch Chunks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Final Status": {
      "main": [
        [
          {
            "node": "Success",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b599403c-1a75-451e-b4f4-4ecc3fbedea4",
  "meta": {
    "instanceId": "677e34a50e2cfa65e82dcd45e3505b6b87f1f9c526a76a13bdd428094bfdaa0f"
  },
  "id": "dRLvEznMSLaJ8Ckn",
  "tags": []
}